import org.gradle.api.tasks.testing.logging.TestExceptionFormat

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'com.google.cloud.tools.jib' version '2.5.0'
    id 'com.diffplug.gradle.spotless' version '3.27.2'
    id 'de.undercouch.download' version '4.0.0'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'bio.terra'
version = System.getenv('SERVICE_VERSION') != null ? System.getenv('SERVICE_VERSION') : '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
    }
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release-local/'
    }
}

// The version of CRL schema library
def crlSchemaVersion = "0.0.2-SNAPSHOT"

dependencies {
    implementation 'io.opencensus:opencensus-api:0.26.0'
    implementation 'io.opencensus:opencensus-impl:0.26.0'
    implementation 'io.opencensus:opencensus-exporter-stats-stackdriver:0.26.0'
    implementation 'io.opencensus:opencensus-exporter-trace-stackdriver:0.26.0'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jdbc'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.webjars', name: 'swagger-ui', version: '3.25.4' // if updating, change path in ApiResourceConfig.java
    implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
    implementation group: 'org.apache.commons', name: 'commons-pool2', version: '2.8.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.12'
    implementation group: 'org.liquibase' , name: 'liquibase-core', version: '3.10.0'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework:spring-jdbc:5.1.9.RELEASE'

    implementation 'com.google.guava:guava:29.0-jre'

    implementation "com.google.auto.value:auto-value-annotations:1.7.3"
    annotationProcessor "com.google.auto.value:auto-value:1.7.3"

    implementation 'bio.terra:stairway:0.0.20'
    implementation group: 'bio.terra.cloud-resource-lib', name: 'cloud-resource-schema', version: crlSchemaVersion
    implementation group: 'bio.terra.cloud-resource-lib', name: 'google-storage', version: '0.0.8-SNAPSHOT'
    implementation group: 'bio.terra.cloud-resource-lib', name: 'google-bigquery', version: '0.0.9-SNAPSHOT'
    implementation group: 'bio.terra.cloud-resource-lib', name: 'google-cloudresourcemanager', version: '0.0.4-SNAPSHOT'
    implementation group: 'com.google.cloud', name: 'google-cloud-pubsub', version: '1.104.1'

    // -- Swagger CodeGen dependencies --
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.20'
    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.1.3'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'com.google.auth:google-auth-library-oauth2-http:0.20.0'
}

// Exclude the Spring logger, so everything will use SLF4J
configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
}

sourceCompatibility = JavaVersion.VERSION_11

java {
    withJavadocJar()
}

ext {
    // where to download the Cloud Profiler agent https://cloud.google.com/profiler/docs/profiling-java
    cloudProfilerAgentUrl = 'https://storage.googleapis.com/cloud-profiler/java/latest/profiler_java_agent.tar.gz'

    // where to place the Cloud Profiler agent in the container
    cloudProfilerLocation = '/opt/cprof'

    // location for jib extras, including the Java agent
    jibExtraDirectory = "${buildDir}/jib-agents"
}

// Download and extract the Cloud Profiler Java Agent
task downloadProfilerAgent(type: Download) {
    src cloudProfilerAgentUrl
    dest "${buildDir}/cprof_java_agent_gce.tar.gz"
}
task extractProfilerAgent(dependsOn: downloadProfilerAgent, type: Copy) {
    from tarTree(downloadProfilerAgent.dest)
    into "${jibExtraDirectory}/${cloudProfilerLocation}"
}

jib {
    from {
        image = "adoptopenjdk:11-jre-hotspot"
    }
    extraDirectories {
        paths = [file(jibExtraDirectory)]
    }
    container {
        jvmFlags = [
                '-agentpath:' + cloudProfilerLocation + '/profiler_java_agent.so=' +
                        '-cprof_service=bio.terra.janitor' +
                        ',-cprof_service_version=' + version +
                        ',-cprof_enable_heap_sampling=true' +
                        ',-logtostderr'
        ]
    }
}

tasks.jib.dependsOn extractProfilerAgent
tasks.jibDockerBuild.dependsOn extractProfilerAgent
tasks.jibBuildTar.dependsOn extractProfilerAgent

// Linter
spotless {
    java {
        googleJavaFormat()
    }
}


// OpenAPI Server Generation
// - Unzip external dependency on Cloud Resource Schema
// - specify the source and target
// - define the generation
// - define the validation
// - define dependencies to include the generated code
def openapiSourceFile = "${projectDir}/src/main/resources/api/service_openapi.yaml"
def openapiTargetDir = "${buildDir}/generated"
def cloudResourceSchemaTargetDor = "${buildDir}/crlSchema"

configurations {
    cloudResourceSchema { transitive = false }
}
dependencies {
    cloudResourceSchema group: 'bio.terra.cloud-resource-lib', name: 'cloud-resource-schema', version: crlSchemaVersion
}
task unzipCloudResourceSchema(type: Copy) {
    from zipTree(configurations.cloudResourceSchema.singleFile).matching {
        include 'cloud_resources_uid.yaml'
    }
    into cloudResourceSchemaTargetDor
}

swaggerSources {
    server {
        inputFile = file("${openapiSourceFile}")
        code {
            language = "spring"
            outputDir = file("${openapiTargetDir}")
            components = ['models', 'apis']
            configFile = file("${projectDir}/src/main/resources/api/swagger-config.json")
            rawOptions = [
                    "--api-package", "${this.group}.janitor.generated.controller".toString(),
                    "--model-package", "${this.group}.janitor.generated.model".toString(),
                    "--library", "spring-boot"
            ]
        }
    }
}

// Note The Open API schema depends on an external library - cloud-resource-schema, so need to unzip it first.
swaggerSources.server.code.dependsOn tasks.unzipCloudResourceSchema

// Note: Spotless deletes the classes OpenApi generates.
// The order needs to be spotlessApply -> openApiGenerate -> build/test/run
swaggerSources.server.code.dependsOn tasks.spotlessApply
compileJava.dependsOn swaggerSources.server.code
sourceSets.main.java.srcDir "${openapiTargetDir}/src/main/java"
ideaModule.dependsOn swaggerSources.server.code
// end of OpenAPI Server Generation

// This is the path to the default Google service account for the janitor service to run as.
def googleCredentialsFile = "${projectDir}/src/test/resources/rendered/sa-account.json"

tasks.withType(Test) {
    environment = [
            'GOOGLE_APPLICATION_CREDENTIALS': "${googleCredentialsFile}"
    ]
    testLogging {
        events = ["passed", "failed", "skipped"]
        // Causes the correct line to be reported on an exception.
        exceptionFormat = TestExceptionFormat.FULL
        reports {
            // Write XML file (used by CircleCI, Jenkins, etc) to build/test-results/*
            junitXml.enabled = true
            // Write human-readable test report to build/reports/tests/*
            html.enabled = true
        }
    }
}

test {
    useJUnitPlatform {
        includeTags 'unit', 'integration'
    }
}

task unitTest(type: Test) {
    useJUnitPlatform {
        includeTags 'unit'
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags "integration"
    }
    // Force tests to always be re-run, since integration tests involve communicating with external
    // resources.
    outputs.upToDateWhen { false }
}
