buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'com.google.cloud.tools.jib' version '2.4.0'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'org.openapi.generator' version '4.3.1'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.diffplug.gradle.spotless' version '3.27.2'
}

group = 'bio.terra'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
    }
}

dependencies {
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jdbc'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.webjars', name: 'swagger-ui', version: '3.25.4' // if updating, change path in ApiResourceConfig.java
    implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
    implementation group: 'org.apache.commons', name: 'commons-pool2', version: '2.8.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.12'
    implementation group: 'org.liquibase' , name: 'liquibase-core', version: '3.10.0'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework:spring-jdbc:5.1.9.RELEASE'

    implementation group: 'bio.terra.cloud-resource-lib', name: 'cloud-resource-schema', version: '0.0.0-SNAPSHOT'

    // -- OpenAPI CodeGen dependencies --
    // TODO: this version of swagger-annotations is old, but the code gen is still relying on it
    //  There is an open bug tracking the fix: https://github.com/OpenAPITools/openapi-generator/issues/4245
    implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.6.0'
    implementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.1'
    // -- --

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

// Exclude the Spring logger, so everything will use SLF4J
configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
}

java {
    withJavadocJar()
}

// Linter
spotless {
    java {
        googleJavaFormat()
    }
}

// OpenAPI Server Generation
// - specify the source and target
// - define the generation
// - define the validation
// - define dependencies to include the generated code

def openapiSourceFile = "${projectDir}/src/main/resources/api/service_openapi.yaml"
def openapiTargetDir = "${buildDir}/generated"

openApiGenerate {
    generatorName = "spring"
    inputSpec = "${openapiSourceFile}".toString()
    outputDir = "${openapiTargetDir}".toString()
    packageName = "${group}"
    apiPackage = "${group}.generated.controller"
    modelPackage = "${group}.generated.model"
    configOptions = [
            interfaceOnly : "true",
            useTags : "true",
            library : "spring-boot",
            dateLibrary : "java8",
            generateApiTests : "false",
            generateApiDocumentation : "false",
            generateModelTests : "false",
            generateModelDocumentation : "false",
    ]
}

openApiValidate {
    inputSpec = "${openapiSourceFile}".toString()
}

// Note: Spotless deletes the classes OpenApi generates.
// The order needs to be spotlessApply -> openApiGenerate -> build/test/run
tasks.openApiGenerate.dependsOn tasks.spotlessApply
compileJava.dependsOn tasks.openApiGenerate
sourceSets.main.java.srcDir "${openapiTargetDir}/src/main/java"
ideaModule.dependsOn tasks.openApiGenerate

// end of OpenAPI Server Generation

test {
    useJUnitPlatform()
}

task unitTest(type: Test) {
    useJUnitPlatform {
        includeTags 'unit'
    }
    testLogging {
        events = ["passed", "failed", "skipped", "started"]
    }
    outputs.upToDateWhen { false }
}